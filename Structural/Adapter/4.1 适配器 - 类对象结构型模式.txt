4.1 Adapter 适配器 类对象结构型模式

1.意图
将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。

2.别名
包装器 Wrapper

3.动机
有时，为复用设计的工具箱类不能够被复用的原因仅仅是因为它的接口与专业应用领域所需要的接口不匹配。
一个应用可能会有一些类具有不同的接口并且这些接口互不兼容，在这样的应用中，这些已经存在并且不相关的类如何协同工作呢？

4.适用性
以下情况适用Adapter模式：
- 你想使用一个已经存在的类，而它的接口不符合你的需求。
- 你想创建一个可以复用的类，该类可以与其它不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作。
- （仅适用于对啊ingAdapter）你想使用一些已经存在的类，但是不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。

5.结构
包括类适配器和对象匹配器。

6.参与者
Target
定义Client使用的特定领域相关的接口
Client
与符合Target接口的对象协同
Adaptee
定义一个已经存在的接口，这个接口需要适配。
Adapter
对Adaptee的接口与Target接口进行适配。

7.协作
Client在Adapter实例上调用一些操作。接着适配器调用Adaptee的操作实现这个请求。

8.效果
类适配器和对象适配器有不同的权衡。类适配器
- 用一个具体的Adapter类对Adaptee和Target进行匹配。结果是当我们想要匹配一个类以及所有它的子类时，类Adapter将不能正常工作。
- 使得Adapter可以重定义Adaptee的部分行为，因为Adapter是Adaptee的一个子类。
- 仅仅引入了一个对象，并不需要额外的指针以间接得到adaptee。
对象适配器则
- 允许一个Adapter与多个Adaptee。即Adaptee本身以及它的所有子类（如果有子类的话）同时工作。Adapter也可以一次给所有的Adaptee添加功能。
- 使得重定义Adaptee的行为比较困难。这就需要生成Adaptee的子类并且使得Adapter引用这个子类而不是引用Adaptee本身。

使用Adapter模式时需要考虑的其他一些因素有：
- Adapter的匹配程度。对Adaptee的接口与Target的接口进行匹配的工作量各个Adapter可能不一样。工作范围可能是，从简单的接口转换（例如改变操作名）到支持完全不同的操作集合。Adapter的工作量取决于Target接口与Adaptee接口的相似程度。
- 可插入的Adapter。当其他的类使用一个类时，如果所需的假定条件越少，这个类就更具可复用性。如果将接口匹配构建为一个类，就不需要假定对其他的类可见的是一个相同的接口。也就是说，接口匹配使得我们可以将自己的类加入到一些现有的系统中去，而这些系统对这个类的接口可能会有所不同。
- 使用双向适配器提供透明操作 使用适配器的一个潜在问题是，它们不对所有的客户都透明。被适配的对象不再兼容Adaptee的接口，因此并不是所有Adaptee对象可以被使用的地方它都可以被使用。双向适配器提供了这样的透明性。在两个不同的客户需要不同的方式查看同一个对象时，双向适配器尤其有用。

9.实现
尽管Adapter模式的实现方式通常简单直接，但是仍需要注意以下一些问题：
- 使用C++实现适配器类。在使用C++实现适配器类时，Adapter类应该采用公共方式继承Target类，并且用私有方式继承Adaptee类。因此Adapter类应该是Target的子类型，但不是Adaptee的子类型。
- 可插入的适配器。有许多方法可以实现可插入的适配器。
首先是为Adaptee找到一个窄接口，即可用于适配的最小操作集。因为包含较少操作的窄接口相对包含较多操作的宽接口比较容易进行匹配。
对这个窄接口，有以下三个实现途径：

10.代码示例

11.已知应用

12.相关模式
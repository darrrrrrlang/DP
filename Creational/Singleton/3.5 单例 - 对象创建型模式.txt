3.5 SINGLETON 单例模式

1.意图
保证一个类仅有一个实例，并提供一个访问它的全局访问点。

2.动机
对一些类来说，只有一个实例是很重要的。我们怎样才能保证一个类只有一个实例并且这个实例易于被访问呢？一个全局变量使得一个对象可以被访问，但它不能防止你实例化多个实例。
一个更好的办法是，让类自身负责保存它的唯一实例。这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。这被成为Singleton模式。

3.适用性
在下面的情况下可以使用Singleton模式：
- 当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。
- 当这个唯一实例是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。

4.结构
无。

5.参与者
Singleton
- 定义一个Instance操作，允许客户访问它的唯一实例。
- 可能负责创建它自己的唯一实例。

6.协作
客户只能通过Singleton的Instance操作访问一个Singleton的实例。

7.效果
Singleton模式有许多优点：
- 对唯一实例的受控访问。因为Singleton类封装它的唯一实例，所以它可以严格的控制客户怎样以及何时访问它。
- 缩小名字空间。Singleton模式是对全局变量的一种改进。它避免了那些存储唯一实例的全局变量污染名字空间。
- 允许对操作和表示的精化。Singleton类可以有子类，而且用这个扩展类的实例来配置一个应用是很容易的。你可以用你所需要的类的实例在运行时刻配置应用。
- 允许可变数目的实例。这个模式使得你易于改变你的想法，并允许Singleton类的多个实例。此外，你可以用相同的方法来控制应用所使用的实例的数目。只有允许访问Singleton实例的操作需要改变。
- 比类操作更灵活。另一种封装单件功能的方式是使用类操作（C++中的静态成员函数）。但这种技术难以改变设计以允许一个类有多个实例（？）。此外C++中的静态函数不是虚函数，因此子类不能多态的重定义它们。

8.实现
下面是实现Singleton模式要考虑的一些问题：
- 保证一个唯一的实例。
- 创建Singleton的子类。主要问题与其说是定义子类不如说是建立它的唯一实例，这样客户就可以使用它。

9.代码示例

10.已知应用